/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.maintaskmanager;


import com.mycompany.maintaskmanager.Task.Importance;
import com.mycompany.maintaskmanager.Task.Status;
import com.mycompany.maintaskmanager.Task.taskType;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.table.DefaultTableModel;

 



/**
 *
 * @author aitda
 */




public class FirstWindow extends javax.swing.JFrame implements ActionListener, DataAdded{
    private ArrayList<Task> Tasks;
    private Task SelectedTask;
    

    
    
    @Override
    public void onDataAdded(){
        LoadDataBase();
        
    }
    
    /**
     * Creates new form FirstWindow
     */
    public FirstWindow() {
        initComponents();
        Tasks = new ArrayList<>();
        LoadDataBase();
        showTaskToDo();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DescriptionLabel = new javax.swing.JLabel();
        TypeLabel = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        LimitDateLabel = new javax.swing.JLabel();
        DeleteButton = new javax.swing.JButton();
        NameLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TaskList = new javax.swing.JList<>();
        ImportanceLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Task Manager");
        setBackground(new java.awt.Color(204, 204, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 51, 102));
        setMaximumSize(new java.awt.Dimension(469, 382));
        setPreferredSize(new java.awt.Dimension(600, 400));

        DescriptionLabel.setText("ts");

        TypeLabel.setText("ts");

        AddButton.setBackground(new java.awt.Color(153, 153, 255));
        AddButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        AddButton.setForeground(new java.awt.Color(255, 255, 255));
        AddButton.setLabel("add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        EditButton.setBackground(new java.awt.Color(153, 153, 255));
        EditButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        EditButton.setForeground(new java.awt.Color(255, 255, 255));
        EditButton.setText("edit");
        EditButton.setEnabled(false);
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        LimitDateLabel.setText("ts");

        DeleteButton.setBackground(new java.awt.Color(153, 153, 255));
        DeleteButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteButton.setEnabled(false);
        DeleteButton.setLabel("delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        NameLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        NameLabel.setText("ts");

        jScrollPane2.setPreferredSize(null);

        TaskList.setBackground(new java.awt.Color(153, 153, 255));
        TaskList.setFont(new java.awt.Font("Segoe UI Semilight", 0, 12)); // NOI18N
        TaskList.setForeground(new java.awt.Color(255, 255, 255));
        TaskList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TaskListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TaskList);

        ImportanceLabel.setText("ts");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TypeLabel)
                                    .addComponent(DescriptionLabel)
                                    .addComponent(LimitDateLabel)
                                    .addComponent(ImportanceLabel))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(EditButton)))
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(158, 158, 158)
                                .addComponent(NameLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AddButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                                .addComponent(DeleteButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(EditButton)
                .addGap(20, 20, 20)
                .addComponent(NameLabel)
                .addGap(20, 20, 20)
                .addComponent(DescriptionLabel)
                .addGap(26, 26, 26)
                .addComponent(TypeLabel)
                .addGap(32, 32, 32)
                .addComponent(LimitDateLabel)
                .addGap(18, 18, 18)
                .addComponent(ImportanceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(DeleteButton))
                .addGap(18, 18, 18))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TaskListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TaskListMouseClicked
        JList list = (JList)evt.getSource();
        if (evt.getClickCount() == 2) {
            int index = list.locationToIndex(evt.getPoint());

            SelectedTask = Tasks.get(index);
            LocalDate limitDate = Tasks.get(index).getTaskLimitDate();
            String description = Tasks.get(index).getTaskDescription();
            Importance imp = Tasks.get(index).getTaskImportance();

            System.out.println("index: "+index);
            clearScreen();

            NameLabel.setText(Tasks.get(index).getTaskName());

            TypeLabel.setText("type: " + Tasks.get(index).getTaskType().toString().toLowerCase(Locale.ITALY));

            if(imp == Importance.VERYIMPORTANT)
                ImportanceLabel.setText("importance: Very important");
            else{
                ImportanceLabel.setText("importance: " + imp.toString().toLowerCase());
            }

            if(description != null)
                DescriptionLabel.setText("description: " + description);
            else
                DescriptionLabel.setText("description: No Description");

            if(limitDate != null){
                LimitDateLabel.setText("limit date: " + Tasks.get(index).getTaskLimitDate());
                System.out.println("date no null");
            }
            else
                LimitDateLabel.setText("limit date: No limit");
            
            

            enableButtons();
        }

    }//GEN-LAST:event_TaskListMouseClicked

    
    private void showTaskToDo(){
        if(!Tasks.isEmpty()){
            String message = "";
            
            for(int i = 0 ; i<Tasks.size();i++){
                if(Tasks.get(i).getTaskLimitDate() != null && Tasks.get(i).getTaskLimitDate().equals(LocalDate.now())){
                    message += "les taches du jour sont: ";
                    message += " " + Tasks.get(i).getTaskName();
                    System.out.println("success");
                }
                else{
                    
                }
            }
            if(!"".equals(message))
                JOptionPane.showMessageDialog(null, message);
        }
    }
    
    
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        if(SelectedTask != null)
            new TaskWindow(this,true,SelectedTask).setVisible(true);
        clearScreen();
    }//GEN-LAST:event_EditButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        System.out.println("test");

        //DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //Task _task = new Task( "test", "test", Importance.Important,taskType.Hobby );
        //model.addRow(new String[]{_task.getTaskName(), _task.getTaskImportance().toString(), _task.getTaskCreationDate().toString(),_task.getTaskLimitDate().toString()});
        new TaskWindow(this).setVisible(true);

    }//GEN-LAST:event_AddButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        int index = TaskList.getSelectedIndex();
        String url = "jdbc:sqlite:C:/datab/database.db";
        String query = "DELETE FROM task where id = ?;";

        try (var conn = DriverManager.getConnection(url);
            var pstmt = conn.prepareStatement(query)) {

            pstmt.setInt(1, Tasks.get(index).getId());

            // execute the delete statement
            pstmt.executeUpdate();

            System.out.println("succes delete for " + Tasks.get(index).getId());

            Tasks.remove(index);

            clearScreen();

            LoadDataBase();

            disableButtons();

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }

    }//GEN-LAST:event_DeleteButtonActionPerformed

    
    
    
    
 private boolean LoadDataBase() {
    String url = "jdbc:sqlite:C:/datab/database.db";
    String query = "SELECT * FROM task";
    
   

    try (Connection conn = DriverManager.getConnection(url);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(query)) {

        
        DefaultListModel<String> listModel = new DefaultListModel<>();
        listModel.clear();
        Tasks.clear();
        
        TaskList.setModel(listModel);

        while (rs.next()) {
            int id = rs.getInt("id");
            
            
           
            taskType type = taskType.valueOf(rs.getString("type").toUpperCase());
            Status status = Status.valueOf(rs.getString("status").toUpperCase());
            Importance importance = Importance.valueOf(rs.getString("importance").toUpperCase());

        
            Task _task;
            if(rs.getString("limit_date") != null){
            _task = new Task(
                id,
                rs.getString("name"),
                rs.getString("description"),
                importance,
                type,
                status,
                LocalDate.parse(rs.getString("limit_date"))
                    
            );
            }
            else {
                 _task = new Task(
                id,
                rs.getString("name"),
                rs.getString("description"),
                importance,
                type,
                status);
            }
            

            Tasks.add(_task);
        }
        
        
        
        if(!Tasks.isEmpty()){
           
            for(int i = 0; i < Tasks.size(); i ++ ){
                listModel.addElement(Tasks.get(i).getTaskName());
                
                }
               
        
            TaskList.setModel(listModel);
        }
        
      
        

        return true;
    } catch (Exception e) {
        System.out.println(e.getMessage());
    }
    return false;
}

    
    
    
    
    
    
     
    private void clearScreen(){
            NameLabel.setText("");
            DescriptionLabel.setText("");
            TypeLabel.setText("");
            ImportanceLabel.setText("");
            LimitDateLabel.setText("");
    }
    
    private void enableButtons(){
        DeleteButton.setEnabled(true);
        EditButton.setEnabled(true);
    }
    
    private void disableButtons(){
        DeleteButton.setEnabled(false);
        EditButton.setEnabled(false);
    }
    
    @Override
    public void actionPerformed(ActionEvent e){
        System.out.println("test");
    }
    
    /**
     * @param args the command line arguments
     */
   
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JLabel DescriptionLabel;
    private javax.swing.JButton EditButton;
    private javax.swing.JLabel ImportanceLabel;
    private javax.swing.JLabel LimitDateLabel;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JList<String> TaskList;
    private javax.swing.JLabel TypeLabel;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
